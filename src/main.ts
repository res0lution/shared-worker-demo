import './style.css'
import typescriptLogo from './typescript.svg'

import viteLogo from '/vite.svg'

document.querySelector<HTMLDivElement>('#app')!.innerHTML = `
	<div>
		<img src="${viteLogo}" class="logo" alt="Vite logo" />
		<img src="${typescriptLogo}" class="logo vanilla" alt="TypeScript logo" />

		<h1>Vite + TypeScript</h1>

		<div class="card">
			<button id="openAllTabsModal" type="button">–û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É –≤–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–∫–∞—Ö</button>
		</div>

		<div id="modalOverlay" class="modal-overlay" aria-hidden="true">
			<div class="modal">
				<h2>Shared modal!</h2>
				<p>–≠—Ç–æ –º–æ–¥–∞–ª–∫–∞, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —á–µ—Ä–µ–∑ SharedWorker.</p>
				<div class="card">
					<button id="closeAllTabsModal" type="button">–ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É –≤–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–∫–∞—Ö</button>
				</div>
			</div>
		</div>
	</div>
`

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è shared worker
let port: MessagePort
(function initSharedWorker() {
	const worker = new SharedWorker('shared-worker.js')
	port = worker.port
	port.start()

	// UI-—Ö—É–∫–∏ (–∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
	const $log = document.getElementById('log')
	const $form = document.getElementById('form')
	const $input = document.getElementById('input')
	const $openBtn = document.getElementById('openAllTabsModal')
	const $closeBtn = document.getElementById('closeAllTabsModal')
	const $overlay = document.getElementById('modalOverlay')

	function log(line: string) {
		if ($log) {
			const li = document.createElement('li')
			li.textContent = line
			$log.appendChild(li)
		}
		else {
			console.log(line)
		}
	}

	// –ü—Ä–∏—ë–º —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤–æ—Ä–∫–µ—Ä–∞
	port.onmessage = (e: MessageEvent) => {
		const msg = e.data
		switch (msg?.type) {
			case 'hello':
				log(`üßµ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ. –í–∞—à clientId: ${msg.clientId}. –ö–ª–∏–µ–Ω—Ç–æ–≤: ${msg.count}`)
				break
			case 'system':
				log(msg.text)
				break
			case 'chat':
				log(`üí¨ [${msg.from}]: ${msg.text}`)
				break
			case 'modal-open':
				if ($overlay) $overlay.setAttribute('aria-hidden', 'false')
				log('üîî modal-open')
				break
			case 'modal-close':
				if ($overlay) $overlay.setAttribute('aria-hidden', 'true')
				log('üîï modal-close')
				break
			case 'echo':
				log(`‚Ü©Ô∏è echo: ${JSON.stringify(msg.received)}`)
				break
			default:
				log(`(unknown) ${JSON.stringify(msg)}`)
		}
	}

	port.onmessageerror = () => log('‚ö†Ô∏è messageerror')
	// MessagePort doesn't have onerror, errors are handled via message events

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ä–º–∞)
	if ($form && $input) {
		$form.addEventListener('submit', (e: Event) => {
			e.preventDefault()
			const inputElement = $input as HTMLInputElement
			const text = inputElement.value.trim()
			if (text) {
				port.postMessage({ type: 'chat', text })
				log(`üèñÔ∏è [ME]: ${text}`)
				inputElement.value = ''
				inputElement.focus()
			}
		})
	}

	// –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –≤–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
	if ($openBtn) {
		$openBtn.addEventListener('click', () => {
			port.postMessage({ type: 'modal-open' })
		})
	}
	if ($closeBtn) {
		$closeBtn.addEventListener('click', () => {
			port.postMessage({ type: 'modal-close' })
		})
	}
	if ($overlay) {
		$overlay.addEventListener('click', (ev) => {
			if (ev.target === $overlay) {
				port.postMessage({ type: 'modal-close' })
			}
		})
	}

	// –ß–∏—Å—Ç–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏/–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –≤–∫–ª–∞–¥–∫–∏
	window.addEventListener('beforeunload', () => {
		try {
			port.postMessage({ type: 'disconnect' })
			port.close()
		}
		catch {}
	})
})()
